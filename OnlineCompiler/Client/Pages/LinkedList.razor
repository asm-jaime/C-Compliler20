@page "/linkedlist"
@using OnlineCompiler.Shared
@inject HttpClient _http
@using Microsoft.AspNetCore.Components
@inject IStringLocalizer<Localization> _loc

<PageTitle>@_loc["OnlineCsharpCompiler"]</PageTitle>

<div class="container my-5">
    <div class="text-center">
        <h2>Связанный список (LinkedList)</h2>
    </div>
    <p>Класс LinkedList представляет связанный список, который является одной из структур данных. В связанном списке каждый элемент содержит ссылку на следующий элемент. Извлечение элементов происходит путем перехода по ссылкам от одного элемента к другому.
    </p>
    <p>Связанный список является гибкой структурой данных, так как он позволяет добавлять, удалять и изменять элементы без необходимости перемещения всех элементов. Это отличает его от массива, где элементы хранятся в смежных ячейках памяти.
    </p>
    <h3>Пример использования связанного списка</h3>

    <p>Вот визуальное представление внутренней структуры Связанного списка:</p>
    <img src="linkedlist.png" alt="Визуальное представление внутренней структуры связанного списка">

    <h3>В классе LinkedList можно выделить следующие методы:</h3>
    <ul>
        <li>AddFirst: добавляет элемент в начало списка</li>
        <li>AddLast: добавляет элемент в конец списка</li>
        <li>RemoveFirst: удаляет первый элемент из списка</li>
        <li>RemoveLast: удаляет последний элемент из списка</li>
        <li>Contains: проверяет наличие элемента в списке и возвращает true при его наличии</li>
        <li>Find: ищет элемент в списке и возвращает его</li>
    </ul>
</div>

@if (_userExecuted)
{
    <br/>
    <button class="btn btn-warning" @onclick="ToggleCode">@if (_showCode) {<text>Скрыть подсказку</text>} else {<text>Показать подсказку</text>}</button>
    if (_showCode)
    {
        <p></p>
        <CodeEditor @bind-Code="_innerCode">@TemplateLinkedList.LinkedListCode
        </CodeEditor>
        <br/>

        }
}                                                                                                               

<p></p>
<p>Пишите свой код тут: </p>
<CodeEditor @bind-Code="_userInnerCode">@TemplateLinkedList.UserLinkedListCode</CodeEditor>
<br />
<button class="btn btn-primary @(ExecuteButtonDisabled?"disabled":"")" @onclick="@(async () => { _userExecuted = true; await UserExecuteCode(); })">@_loc["Execute"]</button>

<br />
@if (_executionInfo != null)
{
    <text>&nbsp;</text>
    switch (_executionInfo.Status)
    {
        case ExecutionInfo.ExecutionStatus.Preparing:
            {
                <status-indicator pulse />
                <label>@_loc["Preparing"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Compiling:
            {
                <status-indicator active />
                <label>@_loc["Compiling"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.CompilationError:
            {
                <status-indicator negative />
                <label>@_loc["CompilationError"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Running:
            {
                <status-indicator active pulse />
                <label>@_loc["Running"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Finished:
            {
                <status-indicator positive />
                <label>@_loc["Finished"]</label>
                break;
            }
    }
    <br />
    if (OutputSplitByNewLines != null)
    {
        @foreach (string line in OutputSplitByNewLines)
        {
            <p>@line</p>
        }
        <p>Время: @_executionInfo.CompilerTime мс</p>
    }
}


@code
{
    bool _showCode;

    void ToggleCode()
    {
        _showCode = !_showCode;
    }
    bool _userExecuted;
    private string? _innerCode;
    private string? _userInnerCode;

    private bool ExecuteButtonDisabled = false;
    
    /// <summary>
    /// Information about code execution operation
    /// </summary>
    private ExecutionInfo? _executionInfo;
    /// <summary>
    /// Output from ExecutionInfo, split by Environment.NewLine
    /// </summary>
    private IEnumerable<string>? OutputSplitByNewLines => _executionInfo?.Output.Split(Environment.NewLine);

    private async Task UserExecuteCode()
    {
        if (_userInnerCode != null && !ExecuteButtonDisabled)
        {
            ExecuteButtonDisabled = true;
            _executionInfo = new ExecutionInfo(ExecutionInfo.ExecutionStatus.Running, "");
            var userresponse = await _http.PostAsJsonAsync("Execution/LinkedList", value: _userInnerCode);
            ExecutionInfo? result = await userresponse.Content.ReadFromJsonAsync<ExecutionInfo>();
            _executionInfo = result;
            ExecuteButtonDisabled = false;
        }
    }
}
