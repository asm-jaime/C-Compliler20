@page "/hashset"
@using OnlineCompiler.Shared
@inject HttpClient _http
@using Microsoft.AspNetCore.Components
@inject IStringLocalizer<Localization> _loc

<PageTitle>@_loc["OnlineCsharpCompiler"]</PageTitle>

<div class="container my-5">
    <div class="text-center">
        <h2>Хеш-таблица (HashSet)</h2>
    </div>
    <p>Класс HashSet предоставляет высокопроизводительные операции набора. Набор — это коллекция, которая не содержит повторяющихся элементов и элементы которой находятся в определенном порядке.</p>
    
    <p>Класс HashSet T> основан на модели математических наборов и предоставляет высокопроизводительные операции набора, аналогичные доступу к ключам коллекций Dictionary TKey,TValue> или Hashtable . Проще говоря, HashSet T класс можно рассматривать как коллекцию без значений Dictionary TKey,TValue .</p>
    <p>Вот визуальное представление внутренней структуры Хеш-таблица:</p>
    <img src="9.png" alt="Визуальное представление внутренней Хеш-таблица">

    <h3>В классе Stack можно выделить следующие методы:</h3>
    <ul>
        <li>Add(T): Добавляет указанный элемент в набор.</li>
        <li>Clear(): Удаляет все элементы из объекта HashSet</li>
        <li>Remove(T): Удаляет указанный элемент из объекта HashSet</li>
        <li>Contains(T): Определяет, содержит ли объект HashSet указанный элемент.</li>
        <li>CopyTo(T[], Int32, Int32): Копирует указанное количество элементов объекта HashSet в массив, начиная с указанного индекса массива.</li>
    </ul>
</div>

@if (_userExecuted)
{
    <br/>
    <button class="btn btn-warning" @onclick="ToggleCode">@if (_showCode) {<text>Скрыть подсказку</text>} else {<text>Показать подсказку</text>}</button>
    if (_showCode)
    {
        <p></p>
        <CodeEditor @bind-Code="_innerCode">@TemplateHashSet.HashSetCode
        </CodeEditor>
        <br/>

    }
}                                                                                                               

    <p></p>
<p>Пишите свой код тут: </p>
<CodeEditor @bind-Code="_userInnerCode">@TemplateHashSet.UserHashSetCode
</CodeEditor>
<br />
<button class="btn btn-primary @(ExecuteButtonDisabled?"disabled":"")" @onclick="@(async () => { _userExecuted = true; await UserExecuteCode(); })">@_loc["Execute"]</button>

<br />
@if (_executionInfo != null)
{
    <text>&nbsp;</text>
    switch (_executionInfo.Status)
    {
        case ExecutionInfo.ExecutionStatus.Preparing:
            {
                <status-indicator pulse />
                <label>@_loc["Preparing"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Compiling:
            {
                <status-indicator active />
                <label>@_loc["Compiling"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.CompilationError:
            {
                <status-indicator negative />
                <label>@_loc["CompilationError"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Running:
            {
                <status-indicator active pulse />
                <label>@_loc["Running"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Finished:
            {
                <status-indicator positive />
                <label>@_loc["Finished"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.WithWarning:
        {
            <status-indicator positive />
            <label>Выполнено с замечаниями</label>
            break;
        }
    }
    <br />
    if (_executionInfo != null && _executionInfo.Hints.Count > 0)
    {
        @foreach (string line in _executionInfo.Hints)
        {
            <p>@line</p>
        }
    }
    if (OutputSplitByNewLines != null)
    {
        @foreach (string line in OutputSplitByNewLines)
        {
            <p>@line</p>
        }
        <p>Время: @_executionInfo.CompilerTime мс</p>
    }
}


@code
{
    bool _showCode;

    void ToggleCode()
    {
        _showCode = !_showCode;
    }
    bool _userExecuted;
    private string? _innerCode;
    private string? _userInnerCode;

    private bool ExecuteButtonDisabled = false;
    
    /// <summary>
    /// Information about code execution operation
    /// </summary>
    private ExecutionInfo? _executionInfo;
    /// <summary>
    /// Output from ExecutionInfo, split by Environment.NewLine
    /// </summary>
    private IEnumerable<string>? OutputSplitByNewLines => _executionInfo?.Output.Split(Environment.NewLine);

    private async Task UserExecuteCode()
    {
        if (_userInnerCode != null && !ExecuteButtonDisabled)
        {
            ExecuteButtonDisabled = true;
            _executionInfo = new ExecutionInfo(ExecutionInfo.ExecutionStatus.Running, "");
            var userresponse = await _http.PostAsJsonAsync("Execution/HashSet", value: _userInnerCode);
            ExecutionInfo? result = await userresponse.Content.ReadFromJsonAsync<ExecutionInfo>();
            _executionInfo = result;
            ExecuteButtonDisabled = false;
        }
    }
}